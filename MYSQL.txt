MYSQL自带库
1.`information_schema`
它提供了访问数据库元数据的方式。
SCHEMATA表：提供了当前mysql实例中所有数据库的信息。
TABLES表：提供了关于数据库中的表的信息（包括视图）。
COLUMNS表：提供了表中的列信息。详细表述了某张表的所有列以及每个列的信息。
STATISTICS表：提供了关于表索引的信息。
USER_PRIVILEGES（用户权限）表：给出了关于全程权限的信息。该信息源自mysql.user授权表。是非标准表。
SCHEMA_PRIVILEGES（方案权限）表：给出了关于方案（数据库）权限的信息。该信息来自mysql.db授权表。是非标准表。
TABLE_PRIVILEGES（表权限）表：给出了关于表权限的信息。该信息源自mysql.tables_priv授权表。是非标准表。
COLUMN_PRIVILEGES（列权限）表：给出了关于列权限的信息。该信息源自mysql.columns_priv授权表。是非标准表。
CHARACTER_SETS（字符集）表：提供了mysql实例可用字符集的信息。是SHOW CHARACTER SET结果集取之此表。
COLLATIONS表：提供了关于各字符集的对照信息。
COLLATION_CHARACTER_SET_APPLICABILITY表：指明了可用于校对的字符集。
TABLE_CONSTRAINTS表：描述了存在约束的表。以及表的约束类型。
KEY_COLUMN_USAGE表：描述了具有约束的键列。
ROUTINES表：提供了关于存储子程序（存储程序和函数）的信息。此时，ROUTINES表不包含自定义函数（UDF）。
VIEWS表：给出了关于数据库中的视图的信息。需要有show views权限，否则无法查看视图信息。
TRIGGERS表：提供了关于触发程序的信息。必须有super权限才能查看该表




MYSQL
优化目的
 由于数据库timeout产生5xx错误
 由于慢查询页面加载慢或不能加载
 由于阻塞造成数据无法提交，超时回滚
优化的方法：
SQL及索引 > 数据表设计 > 系统配置（打开文件） > 硬件(IO、内存)

SQL优化
show variables;
配置项：
slow_query_log=on
long_query_time=1
log_query_not_using_indexes=on
slow_query_log_file

返回格式：*****************************************************************
Time                 Id Command    Argument
# Time: 2017-10-30T07:05:32.455376Z
# User@Host: abc[abc] @ localhost []  Id:     3
# Query_time: 2.002709  Lock_time: 0.000000 Rows_sent: 1  Rows_examined: 0
SET timestamp=1509347132;
select sleep(2);
***************************************************************************
#Time: 时间
#User@Host: 主机信息
#Query_tim: 查询时间 lock_time 锁定时间  rows_sent 发送行数 row_examined 扫描行数
set timestamp 执行时间戳
select ...  语句内容
***************************************************************************

explain查询SQL执行计划
table 显示这一行的数据相关哪张表
type 连接的类型，从好到差依次：const > eq_reg > ref > range > index > all
possible_keys 可能应用到的索引，空表示没有
key 实际使用的索引
key_len 索引的长度，在不损失精度的情况下，越短越好
ref 显示索引哪一列被使用了，如果可能的话为常数
rows MYSQL认为必须检查的用来返回的行数
extra需要注意返回的值：
    Using filesort 持到此项，SQL需要优化，SQL需要进行额外步骤实现对返回值的排序，它根据连接类型以及存储顺序键值和匹配条件的全部行的行指针来排序全部行
    Using temporary 看到此项，SQL需要优化，这时，SQL需要创建临时表来存储结果，通常发生在对不同列进行排序上

count(1) count(*) 包含null
count(列) 不包含null
mysql>
mysql> select * from temp;
+------+
| id   |
+------+
| a    |
| 1    |
| NULL |
| a    |
| c    |
+------+
5 rows in set (0.00 sec)
mysql> select count(id),count(1),count(*),count(id="a" or null),count(id="a") from temp;
+-----------+----------+----------+-----------------------+---------------+
| count(id) | count(1) | count(*) | count(id="a" or null) | count(id="a") |
+-----------+----------+----------+-----------------------+---------------+
|         4 |        5 |        5 |                     2 |             4 |
+-----------+----------+----------+-----------------------+---------------+

max优化：max排序等添加索引

优化示例：
mysql> select * from actor;
+----------+------------+
| actor_id | actor_name |
+----------+------------+
|        1 | zs         |
|        2 | ls         |
|        3 | ww         |
+----------+------------+
3 rows in set (0.00 sec)

mysql> select * from film;
+---------+-----------+----------+
| film_id | file_name | actor_id |
+---------+-----------+----------+
|       1 | abc       |        1 |
|       2 | bcd       |        2 |
+---------+-----------+----------+
2 rows in set (0.00 sec)

mysql> explain select actor_name,count(1) from film inner join actor using (actor_id) group by film.actor_id;
+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+----------------------------------------------------+
| id | select_type | table | partitions | type | possible_keys | key  | key_len | ref  | rows | filtered | Extra                                              |
+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+----------------------------------------------------+
|  1 | SIMPLE      | film  | NULL       | ALL  | NULL          | NULL | NULL    | NULL |    2 |   100.00 | Using temporary; Using filesort                    |
|  1 | SIMPLE      | actor | NULL       | ALL  | PRIMARY       | NULL | NULL    | NULL |    3 |    33.33 | Using where; Using join buffer (Block Nested Loop) |
+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+----------------------------------------------------+
2 rows in set, 1 warning (0.00 sec)

mysql> select actor_name,count(1) from film inner join actor using (actor_id) group by film.actor_id;
+------------+----------+
| actor_name | count(1) |
+------------+----------+
| zs         |        1 |
| ls         |        1 |
+------------+----------+
2 rows in set (0.00 sec)

优化方案：
尽可能减少临时表,排序等工作，添加索引 
mysql> mysql> create index IND_ACTOR_ID (actor_id);
Query OK, 0 rows affected (0.01 sec)
Records: 0  Duplicates: 0  Warnings: 0

mysql> explain select actor_name,a.count from actor inner join (select actor_id,count(1) as count from film group by actor_id) as a using (actor_id);
+----+-------------+------------+------------+-------+---------------+--------------+---------+--------------------+------+----------+-------------+
| id | select_type | table      | partitions | type  | possible_keys | key          | key_len | ref                | rows | filtered | Extra       |
+----+-------------+------------+------------+-------+---------------+--------------+---------+--------------------+------+----------+-------------+
|  1 | PRIMARY     | actor      | NULL       | ALL   | PRIMARY       | NULL         | NULL    | NULL               |    3 |   100.00 | NULL        |
|  1 | PRIMARY     | <derived2> | NULL       | ref   | <auto_key0>   | <auto_key0>  | 2       | tem.actor.actor_id |    2 |   100.00 | NULL        |
|  2 | DERIVED     | film       | NULL       | index | IND_ACTOR_ID  | IND_ACTOR_ID | 2       | NULL               |    2 |   100.00 | Using index |
+----+-------------+------------+------------+-------+---------------+--------------+---------+--------------------+------+----------+-------------+
3 rows in set, 1 warning (0.00 sec)

limit优化
limit时常伴随着排序操作，所以应该尽量利用索引进行排序 
好处：可以尽可能少的扫描行，排序可以减少IO
mysql> explain select * from actor order by actor_id limit 1,1;
+----+-------------+-------+------------+-------+---------------+---------+---------+------+------+----------+-------+
| id | select_type | table | partitions | type  | possible_keys | key     | key_len | ref  | rows | filtered | Extra |
+----+-------------+-------+------------+-------+---------------+---------+---------+------+------+----------+-------+
|  1 | SIMPLE      | actor | NULL       | index | NULL          | PRIMARY | 1       | NULL |    2 |   100.00 | NULL  |
+----+-------------+-------+------------+-------+---------------+---------+---------+------+------+----------+-------+
1 row in set, 1 warning (0.00 sec)

mysql> explain select * from actor order by actor_name limit 1,1;
+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+----------------+
| id | select_type | table | partitions | type | possible_keys | key  | key_len | ref  | rows | filtered | Extra          |
+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+----------------+
|  1 | SIMPLE      | actor | NULL       | ALL  | NULL          | NULL | NULL    | NULL |    3 |   100.00 | Using filesort |
+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+----------------+
1 row in set, 1 warning (0.00 sec)
如果允许的话可以利用其它条件where进一步减少扫描条数

如何选择合适的索引列
 1.在where从句 group by 从句 order by 从句 on从句中出现的列
 2.索引字段的越小越好
 3.离散程度大的列放到联合索引的前面


 MYSQL8.0
创建远程用户：
CREATE USER 'abc'@'%' IDENTIFIED BY 'Mysql@123';
ALTER USER 'abc'@'%' IDENTIFIED WITH mysql_native_password BY 'Mysql@123';
grant all on *.* to 'abc'@'%'；

/var/lib/mysql   mysql安装目录
/usr/share/mysql-8.0/    配置文件
/usr/bin   命令目录
/etc/init.d/mysql    mysql启动停止脚本
MYSQL8.0默认utf8mb4编码  8.0新特性
mysql> SHOW VARIABLES LIKE '%char%';
+--------------------------------------+--------------------------------+
| Variable_name                        | Value                          |
+--------------------------------------+--------------------------------+
| character_set_client                 | utf8mb4                        |
| character_set_connection             | utf8mb4                        |
| character_set_database               | utf8mb4                        |
| character_set_filesystem             | binary                         |
| character_set_results                | utf8mb4                        |
| character_set_server                 | utf8mb4                        |
| character_set_system                 | utf8                           |
| character_sets_dir                   | /usr/share/mysql-8.0/charsets/ |
| validate_password.special_char_count | 1                              |
+--------------------------------------+--------------------------------+

select  -->>
连接层  -->> ： 提供客户端连接的服务
服务层  -->> :  提供各种用户使用的接口（select update ...）
                提供SQL优化器（Mysql Query Optimizer）
引擎层  -->> ： 提供了各种存储引擎（InnoDB MyISAM）
存储层  -->> ： 提供存储服务


MYSQL原理
引擎
mysql> mysql> show engines;
引擎                  支持       说明                                                            事务            
+--------------------+---------+----------------------------------------------------------------+--------------+------+------------+
| Engine             | Support | Comment                                                        | Transactions | XA   | Savepoints |
+--------------------+---------+----------------------------------------------------------------+--------------+------+------------+
| MyISAM             | YES     | MyISAM storage engine                                          | NO           | NO   | NO         |
| FEDERATED          | NO      | Federated MySQL storage engine                                 | NULL         | NULL | NULL       |
| InnoDB             | DEFAULT | Supports transactions, row-level locking, and foreign keys     | YES          | YES  | YES        |
| PERFORMANCE_SCHEMA | YES     | Performance Schema                                             | NO           | NO   | NO         |
| MEMORY             | YES     | Hash based, stored in memory, useful for temporary tables      | NO           | NO   | NO         |
| ARCHIVE            | YES     | Archive storage engine                                         | NO           | NO   | NO         |
| CSV                | YES     | CSV storage engine                                             | NO           | NO   | NO         |
| MRG_MYISAM         | YES     | Collection of identical MyISAM tables                          | NO           | NO   | NO         |
| BLACKHOLE          | YES     | /dev/null storage engine (anything you write to it disappears) | NO           | NO   | NO         |
+--------------------+---------+----------------------------------------------------------------+--------------+------+------------+
9 rows in set (0.00 sec)

InnoDB   事务优先（适合高并发操作：行锁）
MyISAM   性能优先（表锁）

创建指定引擎的表
CREATE TABLE student (
stuid INT(11),
stuname VARCHAR(20) NOT NULL,
sex CHAR(1) NOT NULL,
birthday DATETIME,
height INT(3)
) ENGINE = INNODB;

SQL优化
SQL执行顺序：
FROM .. ON .. JOIN .. WHERE .. GROUP BY .. HAVING .. SELECT .. DINSTINCT .. ORDER BY .. LIMIT ..

索引：
主键索引属于唯一索引
单值索引 ：（INDEX） 单列
唯一索引 ： (UNIQUE)不能重复
复合索引 ： 多列构成
>创建索引
语法1： CREATE 索引类型 索引名 ON  表（字段名）
	CREATE INDEX IND_STUDENT_STUNAME ON student(stuname);
语法2： ALTER TABLE 表名 索引类型  索引名（字段名）
	ALTER TABLE student ADD INDEX IND_STUDENT_STUNAME(stuname);
	ALTER TABLE student ADD PRIMARY KEY (stuid);
>查看索引 
mysql> show index from student;
+---------+------------+---------------------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+---------+
| Table   | Non_unique | Key_name            | Seq_in_index | Column_name | Collation | Cardinality | Sub_part | Packed | Null | Index_type | Comment | Index_comment | Visible |
+---------+------------+---------------------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+---------+
| student |          0 | PRIMARY             |            1 | stuid       | A         |           0 |     NULL |   NULL |      | BTREE      |         |               | YES     |
| student |          1 | IND_STUDENT_STUNAME |            1 | stuname     | A         |           0 |     NULL |   NULL |      | BTREE      |         |               | YES     |
+---------+------------+---------------------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+---------+
2 rows in set (0.00 sec)

>删除索引 
DROP INDEX IND_STUDENT_STUNAME ON student;


SQL性能问题
	分析SQL执行计划（分析工具explain）
	MYSQL查询优化器会干扰我们的优化


mysql> explain select * from student\G;
*************************** 1. row ***************************
           id: 1                     编号
  select_type: SIMPLE                类型  
        table: student
   partitions: NULL
         type: ALL
possible_keys: NULL                  预计使用的索引
          key: NULL                  实际使用的索引
      key_len: NULL                  实际使用索引的长度
          ref: NULL                  引用关系
         rows: 1                     通过索引查询到的数据
     filtered: 100.00                额外的优化信息
        Extra: NULL
1 row in set, 1 warning (0.00 sec)

ERROR: 
No query specified




字段说明：
id:
	id相同表示查询在同一级别 按优化后的查询顺序排序 
	如果id不同，id越大的优先被查询
select_type:
	PRIMARY:包含子查询SQL中的主查询
	SUBQUERY：包含子查询的SQL中的子查询
	SIMPLE：简单查询
	DERIVED：衍生表查询（临时查询表）
		在FORM子查询中只有一张表时，衍生查询
		在FORM子查询中，如果有table1 union table2.则table1就是derived.table2就是union
	UNION
	UNION RESULT 
table
	显示表名或别名
	如果是衍生表，表名为<derived2>  表示id为2的衍生表
	对于union表，表名为<union2,3>  表示id为2，3的查询生成的衍生表
type:
	性能顺序 system > const > eq_ref > ref > range > index > all
	system : 只有一条数据的系统表或衍生表只有一条数据的主查询
	const： 仅仅能查询到一条数据的SQL,用于PRIMARY KEY或UNIQUE索引
	eq_ref
	ref
	range: 检索指定范围的行，where后面是一个范围查询
	index： 查询全部索引中的数据
	all： 查询表中全部数据
key_len：
	索引的长度，可以判断复合索引是否完全被使用，单位是字节
ref:
	指明当前表所参照的字段
	const : 常量
	库.表.字段

rows: 
	被索引优化查询的数据个数
extra:
	using filesort: 性能消耗大，需要额外的排序查询
		优化建议： 对于单索引情况，将条件(where)和排序(order by)同一字段
				   对于复合索引，不能跨列（最左前缀原则）
	using temporary: 性能消耗大，需要创建临时表
		优化建议： 一般出现在GROUP BY语句中 
	using index: 性能提升 索引覆盖 索引覆盖将只会查询索引，不会查询原表 所以
		只有使用到列全部都包含在同一个索引中，才会出现索引覆盖，
	using where: 需要回表查询
	Impossible WHERE： 永远为false的where (select * from 表 where 1=2;)

环境：创建测试表
CREATE TABLE `class` (
  `claid` int(4) NOT NULL,
  `claname` varchar(10) NOT NULL,
  `teaid` int(6) DEFAULT NULL,
  `claslogan` varchar(64) DEFAULT NULL,
  PRIMARY KEY (`claid`),
  UNIQUE KEY `UNI_CLASS_TEAID` (`teaid`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci



================================================================================================================================
system
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
mysql> select * from class;
+-------+-----------------+-------+--------------+
| claid | claname         | teaid | claslogan    |
+-------+-----------------+-------+--------------+
|     1 | 一年级一班      |     1 | 团结第一     |
+-------+-----------------+-------+--------------+
1 row in set (0.00 sec)

mysql> EXPLAIN SELECT teaid FROM`class` WHERE claname = '一年级一班';
+----+-------------+-------+------------+--------+---------------+------+---------+------+------+----------+-------+
| id | select_type | table | partitions | type   | possible_keys | key  | key_len | ref  | rows | filtered | Extra |
+----+-------------+-------+------------+--------+---------------+------+---------+------+------+----------+-------+
|  1 | SIMPLE      | class | NULL       | system | NULL          | NULL | NULL    | NULL |    1 |   100.00 | NULL  |
+----+-------------+-------+------------+--------+---------------+------+---------+------+------+----------+-------+
1 row in set, 1 warning (0.00 sec)
================================================================================================================================
结论：system   只有一条数据的系统表只有一条数据的主查询
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
================================================================================================================================


环境：创建测试表
CREATE TABLE `student` (
  `stuid` int(11) NOT NULL,
  `stuname` varchar(20) NOT NULL,
  `sex` char(1) NOT NULL,
  `birthday` datetime DEFAULT NULL,
  `height` int(3) DEFAULT NULL,
  PRIMARY KEY (`stuid`),
  KEY `IND_STUDENT_STUNAME` (`stuname`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci

================================================================================================================================
const
ref
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
mysql> EXPLAIN SELECT * FROM `student` WHERE stuid = '1';
+----+-------------+---------+------------+-------+---------------+---------+---------+-------+------+----------+-------+
| id | select_type | table   | partitions | type  | possible_keys | key     | key_len | ref   | rows | filtered | Extra |
+----+-------------+---------+------------+-------+---------------+---------+---------+-------+------+----------+-------+
|  1 | SIMPLE      | student | NULL       | const | PRIMARY       | PRIMARY | 4       | const |    1 |   100.00 | NULL  |
+----+-------------+---------+------------+-------+---------------+---------+---------+-------+------+----------+-------+
1 row in set, 1 warning (0.00 sec)

mysql> EXPLAIN SELECT * FROM `student` WHERE stuname = '宋江';
+----+-------------+---------+------------+------+---------------------+---------------------+---------+-------+------+----------+-------+
| id | select_type | table   | partitions | type | possible_keys       | key                 | key_len | ref   | rows | filtered | Extra |
+----+-------------+---------+------------+------+---------------------+---------------------+---------+-------+------+----------+-------+
|  1 | SIMPLE      | student | NULL       | ref  | IND_STUDENT_STUNAME | IND_STUDENT_STUNAME | 82      | const |    1 |   100.00 | NULL  |
+----+-------------+---------+------------+------+---------------------+---------------------+---------+-------+------+----------+-------+
1 row in set, 1 warning (0.00 sec)
================================================================================================================================
结论：对于使用主键索引的字段查询type = 'const'
	  对于使用普通索引的字段查询type = 'ref'
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
================================================================================================================================


================================================================================================================================
range
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
mysql> EXPLAIN SELECT * FROM `student` WHERE stuid < 20;
+----+-------------+---------+------------+-------+---------------+---------+---------+------+------+----------+-------------+
| id | select_type | table   | partitions | type  | possible_keys | key     | key_len | ref  | rows | filtered | Extra       |
+----+-------------+---------+------------+-------+---------------+---------+---------+------+------+----------+-------------+
|  1 | SIMPLE      | student | NULL       | range | PRIMARY       | PRIMARY | 4       | NULL |    1 |   100.00 | Using where |
+----+-------------+---------+------------+-------+---------------+---------+---------+------+------+----------+-------------+
1 row in set, 1 warning (0.00 sec)
================================================================================================================================
结论：查询范围数据range
	in 条件有时候会失效
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
================================================================================================================================


================================================================================================================================
index
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
mysql> explain select stuname from student;
+----+-------------+---------+------------+-------+---------------+---------------------+---------+------+------+----------+-------------+
| id | select_type | table   | partitions | type  | possible_keys | key                 | key_len | ref  | rows | filtered | Extra       |
+----+-------------+---------+------------+-------+---------------+---------------------+---------+------+------+----------+-------------+
|  1 | SIMPLE      | student | NULL       | index | NULL          | IND_STUDENT_STUNAME | 82      | NULL |    1 |   100.00 | Using index |
+----+-------------+---------+------------+-------+---------------+---------------------+---------+------+------+----------+-------------+
1 row in set, 1 warning (0.00 sec)
================================================================================================================================
结论：查询全部索引
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
================================================================================================================================


================================================================================================================================
Using filesort
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
mysql> explain select * from student order by birthday;
+----+-------------+---------+------------+------+---------------+------+---------+------+------+----------+----------------+
| id | select_type | table   | partitions | type | possible_keys | key  | key_len | ref  | rows | filtered | Extra          |
+----+-------------+---------+------------+------+---------------+------+---------+------+------+----------+----------------+
|  1 | SIMPLE      | student | NULL       | ALL  | NULL          | NULL | NULL    | NULL |    1 |   100.00 | Using filesort |
+----+-------------+---------+------------+------+---------------+------+---------+------+------+----------+----------------+
1 row in set, 1 warning (0.00 sec)
================================================================================================================================
结论：需要额外排序的查询
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
================================================================================================================================

================================================================================================================================
Using filesort
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
mysql> explain select teaname from teacher t,class c where t.teaid = c.teaid group by c.claid;
+----+-------------+-------+------------+------+-------------------------+-----------------+---------+--------------+------+----------+-----------------+
| id | select_type | table | partitions | type | possible_keys           | key             | key_len | ref          | rows | filtered | Extra           |
+----+-------------+-------+------------+------+-------------------------+-----------------+---------+--------------+------+----------+-----------------+
|  1 | SIMPLE      | t     | NULL       | ALL  | PRIMARY                 | NULL            | NULL    | NULL         |    1 |   100.00 | Using temporary |
|  1 | SIMPLE      | c     | NULL       | ref  | PRIMARY,UNI_CLASS_TEAID | UNI_CLASS_TEAID | 5       | test.t.teaid |    2 |   100.00 | NULL            |
+----+-------------+-------+------------+------+-------------------------+-----------------+---------+--------------+------+----------+-----------------+
2 rows in set, 1 warning (0.00 sec)
================================================================================================================================
结论：
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
================================================================================================================================




