关系型数据库           NOSQL数据库
数据库                数据库
表                    集合
行                    文档
列                    成员


开始mongodb服务
mongod -f conf/mongodb.conf

连接mongodb服务器
mongo localhost:27017/test

创建/切换数据库
use test

删除数据库
db.dropDatabase()

创建集合
db.createCollection("emp")

查询集合
show collections

//插入数据
db.test_collection.insert({x:1})

删除
db.students.deleteOne({"name":"zhangsan"})
db.students.deleteMany({"name":"zhangsan"})

查询数据
db.test_collection.find()
db.test_collection.find().skip(5).limit(3).sort({x:1})
比较运算
大于
db.emp.find({"age":{"$gt":30}},{"_id":0})
大于等于
db.emp.find({"age":{"$gte":28}},{"_id":0})
小于
db.emp.find({"age":{"$lt":30}},{"_id":0})
小于等于
db.emp.find({"age":{"$lte":28}},{"_id":0})
逻辑运算
与
db.emp.find({"$and": [{"age":{"$gt":30}},{"wage":{"$gte":18000}}]})
或
db.emp.find({"$or": [{"age":{"$gt":30}},{"wage":{"$gte":18000}}]})
非
db.emp.find({"name":{"$ne":"张三"}})
或非
db.emp.find({"$nor": [{"age":{"$gt":30}},{"wage":{"$gte":18000}}]})
判断空值$ifNull
求模（8,18,28,38.....）
db.emp.find({"age":{"$mod":[10,8]}})
范围查询
db.emp.find({"name"：{"$in":["张三","李四","林冲"]}})
db.emp.find({"name"：{"$nin":["张三","李四","林冲"]}})
数组查询
db.students.find({"score":{"$all":["鬼谷子","孙子兵法"]}})
db.students.find({"score":{"$size":3}})
第一门课程是语文
db.students.find({"score.0":"语文"})
只显示前两门课程
db.students.find({"score":{"$size":3}},{"score":{"$slice":2}})
只显示后两门课程
db.students.find({"score":{"$size":3}},{"score":{"$slice":-2}})
跳过一门 显示下两门（即显示二三门）
db.students.find({"score":{"$size":3}},{"score":{"$slice":[1,2]}})

判断字段是否存在
db.students.find({"parents.ba":{$exists: true}})
db.students.find({"parents.ba":{$exists: false}})
where
对于where这类操作是属于进行每一行的信息判断，实现上对于数据量较大的情况并不方便使用
db.students.find({"$where":"this.age<22"})
db.students.find("this.age<22")
多条件的and连接
db.students.find({"$and":[{"$where":"this.age >23"}, {"$where":"this.age <29"}]})
虽然这种形式的操作可以实现数据查询，但是最大的缺点是将在mongodb里面保存的bson数据变为了javascript的语法结构。这样的方式不方便使用数据库的索引机制。

正则运算
基础语法：{key:正则标记};
完整语法：{key:{"$regex":正则标记,"$options":选项}};
对于options主要是设置正则的信息查询的标记：
  -i  忽略字母大小写
  -m  多行查找
  -x  空白字符串除了被转义的或在字符类中以外的完全被忽略
  -s  匹配所有的字符，包括换行内容
db.students.find({"name":/^孙/})

排序
升序：sort({字段：1});
降序：sort({字段：-1});
db.students.find({}).sort({ "age":-1 })
自然排序：
在进行排序过程里面有一种自然排序，即按照数据保存的先后顺序排序，使用“$natural"表示
db.students.find({}).sort({ "$natural":-1 })

数据分页显示
skip(n) 表示跨过N个数据行
limit(n)  取出的数据行的个数限制
db.students.find({}).sort({ "$natural":-1 }).skip(0).limit(5)


更新数据
语法：db.集合.update(更新条件,新对象数据（修改器），upsert,multi)
upsert 如果不存在，true则增加，false不添加
multi 是否更新查询到的所有记录，true则更新所有，false只更新查询到的第一条
db.test_collection.update({x:256},{x:256,y:99,z:512})
db.test_collection.update({x:256},{$set:{y:1024}})
db.test_collection.update({y:555},{x:666},true)
db.test_collection.update({x:666},{$set:{x:888}},false,true)
save()函数与update()方法类似，但不常用 
db.students.save({"_id":ObjectId("5ac48f931579d73530d2374e"),"age":29})
修改器
修改器1：$inc  主要针对于一个数字字段，增加某个数字字段的数据内容
语法：{"$inc":{成员：内容}}
所有人的年龄加100
db.students.update({},{"$inc":{age:100}},false,true)
修改器2：$set  进行内容的重新设置
语法：{"set":{成员：新内容}}
db.students.update({"name":"孙膑"},{$set:{"age":32}})
修改器3：#unset  删除某个成员
语法：{"$unset":{成员：1}}
db.students.update({"name":"孙膑"},{$unset:{"parents":1}})
修改器4：$push  将内容追加到指定的成员中（数组）
语法：{"$push":{成员：值}}
说明：用于数组的添加，如果成员不存在则创建，只能添加一个值
db.students.update({"name":"孙膑"},{$push:{"score":"周易"}})
修改器5：$pushAll  与push类似，可以一次追加多个内容到数组里面 
语法：${"pushAll":{成员：内容数组}}
db.students.update({"name":"孙膑"},{$pushAll:{"score":["美术","琴","棋"]}})
修改器6：$addToSet  向数组里面增加一个新的内容，只有内容不存在才会添加
语法：{"$addToSet":{成员：值}}
db.students.update({"name":"孙膑"},{$addToSet: {"score":"周易"}})
修改器7：$pop  删除数组内的数据
语法：{"$pop":{成员：内容}}
说明：内容设置为1则删除最后一个，内容设置为-1删除第一个
db.students.update({"name":"孙膑"},{"$pop":{"score":1}})
修改器8：  $pull 从数组中删除一个指定内容的数据
语法：{"$pull":{成员：值}}
db.students.update({"name":"孙膑"},{"$pull":{"score":"语文"}})
修改器9：  $pullAll  一次性删除多个内容
语法：{"$pullAll":{成员：值数组}}
db.students.update({"name":"孙膑"},{"$pullAll":{"score":["数学","美术","棋"]}})
修改器10： $rename: 为成员名称重命名
语法：{"$rename":{旧成员名称：新成员名称}

删除数据
语法：db.集合名.remove(删除条件,是否只删除一个数据)
db.test_collection.remove({x:888})
删除name字段包含有aaa或AAA的
db.students.remove({"name":/aaa/i})文档

游标：
使用find()可以返回游标，可以使用printjson()函数可以输出内容
var cursor = db.students.find({});
while(cursor.hasNext()){
    var doc = cursor.next();
    print(doc.name);
}

查询索引
db.test_collection.getIndexes()

创建索引
db.test_collection.ensureIndex({x:-1})

删除索引
语法：db.集合名.dropIndexes()  删除全部索引


索引
explain();查询函数分析
id索引
单键索引
语法：db.集合名称.ensureIndex({列名：排序模式})
    排序模式设置的1表示索引将按照升序的方式进行排列;
    设置的-1表示索引将按照降序的方式进行排列
db.students.ensureIndex({"name":1})
联合索引
db.students.ensureIndex({"name":1,"age":1},{"name":"name_1_age_1_index"})
唯一索引：使该字段值不重复
创建唯一索引：
db.students.ensureIndex({"name":1},{"unique":true,name:"name_unique_index"})
查询会使用以上索引
db.students.find({"name":"孙膑","age":22}).explain()
如果添加重复信息，会报错E11000 
过期索引
时间到后数据会被自动删除，但时间不准确
db.phones.ensureIndex({"time":1},{"expireAfterSeconds":10})
db.phones.insert({"tel":"110","code":"110","time":new Date()})
db.phones.insert({"tel":"112","code":"112","time":new Date()})
db.phones.insert({"tel":"120","code":"120","time":new Date()})
db.phones.insert({"tel":"130","code":"130","time":new Date()})
db.phones.find({})
全文索引
db.news.ensureIndex({"title":"text","context":"text"},{"name":"title_text_context_text_index"})
db.news.insert({"title":"java","context":"abccredis,java","time":new Date()})
db.news.insert({"title":"html5","context":"bbchtml53dasfjava","time":new Date()})
db.news.insert({"title":"mongodb","context":"mongodb_c#_abcc_python","time":new Date()})
db.news.insert({"title":"java","context":"mongdb,sdafsdafsdaf","time":new Date()})
db.news.insert({"title":"python","context":"python_mysql_oracle_c#","time":new Date()})
单一条件查询
db.news.find({$text: { $search: "java"}})
或操作关系查询
db.news.find({$text: { $search: "abccredisjava java"}})
与操作关系查询
db.news.find({$text: { $search: "\"java\" \"mongdb\""}})
排除操作关系查询
db.news.find({$text: { $search: "java -mongdb" }})
查询按匹配分值进行排序 以实现更加准确的信息搜索
db.news.find({$text: { $search: "java" }},{"score":{"$meta":"textScore"}}).sort({ "score":{"$meta":"textScore"}})
为所有字段设置全文索引,尽可能别用，因为设置过多索引会导致效率变低
db.集合名称.ensureIndex("$**":"text")
地理信息索引
平面索引  2D索引
球面索引  2DSphere

//为shops的集合定义2D的索引，之后就可以实现坐标位置的查询,而要进行查询有两种方式
//$near 查询，查询距离某个点最近的点
//geoWithin 查询，查询某个形状内的点
db.shops.drop()
db.shops.ensureIndex({"loc":"2d"})
db.shops.insert({"shop_name":"shop01",loc:[10,10]})
db.shops.insert({"shop_name":"shop02",loc:[11,11]})
db.shops.insert({"shop_name":"shop03",loc:[11,12]})
db.shops.insert({"shop_name":"shop04",loc:[12,12]})
db.shops.insert({"shop_name":"shop05",loc:[30,30]})
db.shops.insert({"shop_name":"shop06",loc:[10,10]})
db.shops.find({loc:{"$near":[11,11]}})
//如果执行以上查询，实际上会将数据集合里面前100个点都返回
//以下查询可以实现指定距离的查询，但不支持最小距离
db.shops.find({loc:{"$near":[11,11],"$maxDistance":2}})
//2D查询虽然支持最大距离，但不支持最小距离，但是可以使用查询范围
//$geoWithin: 支持以下设置
//矩形范围: {$box:[[x1,y1],[x2,y2]]}
db.shops.find({"loc":{$geoWithin: {$box:[[0, 0],[ 11,11]]}}})
//圆形范围: {$center: [[x1,y1],r]}
db.shops.find({"loc":{$geoWithin: {$center:[[0,0],15]}}})
//多边形: {$polygon: [[x1,y1],[x2,y2],[x3,y3],[x4,y4],......,[xn,yn]]}
db.shops.find({"loc":{"$polygon": [[9,9],[9,11],[11,9]]}})   ==》》  "errmsg" : "unknown operator: $polygon"
 在mongoDB里面,除了一些支持的函数之外，还有一个重要的命令，runCommand(),这个函数可以执行特定的mongodb命令
 db.runCommand({"geoNear:":"shop","near":[10,10],"maxDistance":5,"num":2})  ==>> "no such command: 'geoNear:'

 聚合
获取集合数据量
db.students.find({"name":/孙./i}).count()
//消除重复数据
db.names.insert({"name":"张三"})
db.names.insert({"name":"张三丰"})
db.names.insert({"name":"李四"})
db.names.insert({"name":"李时针"})
db.names.insert({"name":"张三"})
db.names.find({}).count()
db.names.distinct("name")
//group操作
db.names.aggregate({$group: {_id:"$name",_COUNT:{$sum: 1}}})
//MapReduce
//是整个大数据的精髓所在，在实际中不要使用，所谓MapReduce是将操作分两部进行
//map操作是将数据取出
//reduce负责数据的最后处理
//使用MapReduce操作最终会将结果保存在一个单独的集合里面。
//根据sex成员分组，取各文档name成员
db.emp.mapReduce(
    function(){emit(this.sex,this.name);},
    function(key,value){return {"sex":key,"name":value};},{
        out : "t_sex_emp"
    })
//执行之后所有的结果都保存在t_sex.emp
db.t_sex.emp.find()
//根据sex成员分组，取出文档name成员，最大年龄，平均工资，成员数量
db.emp.mapReduce(
    function(){
        emit(this.sex,{"count":1,"name":this.name,"age":this.age,"wage":this.wage});
    },
    function(key,values){
        var count = 0;
        var max_age = values[0].age;
        var sum_wage = 0;
        var names = new Array();
        for(var val in values){
            names[val] = values[val].name
            count += values[val].count;
            sum_wage += values[val].wage;
            if(values[val].age > max_age){
                max_age = values[val].age;
            }
        }
        var avg_wage = (sum_wage/count).toFixed(2);
        return {"count":count,"max_age":max_age,"avg_wage":avg_wage,"names":names}
    },{
        "out":"t_sex_name_count_emp"
    }
    )
db.t_sex_name_count_emp.find()

聚合框架
常用表达式：
$sum            计算总和
$avg            计算平均值
$min            获取集合中所有文档对应最小值
$max            获取集合中所有文档对应最大值
$push           在结果文档中插入值到一个数组中
$addToSet       在结果文档中插入值到一个数组中，但不会创建副本
$first          根据资源文档的排序获取第一个文档数据
$last           根据资源文档的排序获取最后一个文档数据
group  主要进行分组数据操作，所有的分组数据都是无序的，并且都是在内存中完成的，所以并不支持大数据量
db.emp.aggregate([{$group: {_id:"$sex",count:{"$sum":1}}}])
//按sex成员分组对wage成员求和
db.emp.aggregate([{$group: {_id:"$sex",sun_wage:{"$sum":"$wage"}}}])
//按sex成员分组对wage求平均值
db.emp.aggregate([{$group: {_id:"$sex",avg_wage:{"$avg":"$wage"}}}])
//按sex成员分组对wage求最大值
db.emp.aggregate([{$group: {_id:"$sex",avg_wage:{"$max":"$wage"}}}])
//按sex成员分组对wage求最小值
db.emp.aggregate([{$group: {_id:"$sex",avg_wage:{"$min":"$wage"}}}])
//按性别显示人员
db.emp.aggregate({$group: {_id:"$sex",names:{"$push":"$name"}}})
//去除重复值
db.emp.aggregate({$group: {_id:"$sex",names:{"$addToSet":"$name"}}})
//查询第一个
db.emp.aggregate({$group: {_id:"$sex",names:{"$first":"$name"}}})
//查询最后一个
db.emp.aggregate({$group: {_id:"$sex",names:{"$last":"$name"}}})
$project处理  投影
可以利用$project来控制数据列的显示规则，只有设置进去的参数才会显示，_id默认显示 
db.emp.aggregate({$project: {"_id":0,"name":1}})
//四则运算
$add             加
$subtract        减
$multiply        乘
$divide          除
$mod             模
除了四则运算之外
求年薪
db.emp.aggregate({$project: {"name":1,"sex":1,"year_wage":{$multiply: ["$wage",12]}}})

字符串操作
$concat            连接
$substr            截取
$toLower           转小写
$toUpper           转大写
$strcasecmp        忽略大小写

db.emp.aggregate({$project: {
    _id:0,
    "name":{$substr:["$name",0,3]},
    "性别":"$sex",                 //别名
    "deptno":{$eq: ["$deptno",1]}
}})
//查询姓名，性别，年薪; 条件：月工资小于10000，结果降序排列
db.emp.aggregate([
    {$match: {"wage":{$lte:10000}}},
    {$project: {_id:0,"name":1,"sex":1,"year_wage":{$multiply: ["$wage",12]}}}, 
    {$sort: {"year_wage":-1}}
])

分页：
$limit  用于分页数据
$skip  用于跨过数据
db.students.aggregate([
    {$project: {"_id":0,"name":1,"age":1,"score":1}},
    {$skip: 3}, 
    {$limit: 3}
    ])

$unwind  将数组分成字符串显示，以方便查看
db.students.aggregate([
    {$match: {"name":{$eq: "孙膑"}}}，
    {"$unwind": "$score"}
    ])

db.shops.aggregate([
    {$geoNear: {
        "near":[11,11], 
        "distanceField":"loc", //显示距离
        "maxDistance": 2, 
        "num":3
    }}
    ])

$out 利用此操作可以将查询结果输出到指定集合里面
一般用来复制表

固定集合
所谓固定集合是指我们规定集合大小，如果要保存的数据内容超过了集合的长度，那么将采用LRU算法以最近最少使用原则将数据删除，从而保存新的数据
如果要想使用固定集合必需使用createCollection()函数创建
//capped = true  表示集合为固定集合
//size = 1024  表示空间大小为1024
//max = 5   表示最大条数为5条
db.createCollection("capp",{"capped":true,"size":1024,"max":5})
for (let i = 0; i < 10; i++) { 
    db.capp.insert({"key":i,"value":"val"+i})
};
db.capp.find({})

GridFs  在mongoDB里面支持图片、音乐、视频等二进制存储
mongofiles  指令完成
mongofiles --port=端口 put 文件名
mongofiles --port=端口 list
在mongodb里面有一个fs系统集合，这个集合默认保存在test数据库下面
use test;
db.fs.files.find()
删除文件
mongofiles --port=端口 delete 文件名

用户管理 
必需在服务器启动的时候打开授权认证
必需配置用户密码 角色
mongodb数据库的授权认证是针对数据库的
创建用户
db.createUser(
   {
     user: "abc",
     pwd: "123",
     roles: [ {role:"readWrite", db:"test"} ]
   }
)
在配置文件添加
auth = true
登录的时候使用用户名密码登录
mongo -u abc -p 123
改密码，需要设置为非授权
db.changeUserPassword(用户名，新密码)

java对mongodb3的操作

import com.mongodb.BasicDBObject;
import com.mongodb.MongoClient;
import com.mongodb.MongoClientURI;
import com.mongodb.client.FindIterable;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoCursor;
import com.mongodb.client.MongoDatabase;
import com.mongodb.client.result.DeleteResult;
import com.mongodb.client.result.UpdateResult;
import org.bson.Document;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.regex.Pattern;

import static com.mongodb.client.model.Filters.*;


public class Mongo3Demo {

    public static void main(String[] args){
        MongoClientURI uri = new MongoClientURI("mongodb://abc:123@locallinux.top:27017/?authSource=test");
        MongoClient client = new MongoClient(uri);
        MongoDatabase test_database = client.getDatabase("test");
        MongoCollection<Document> students_coll =  test_database.getCollection("students");
        //添加
        ArrayList<Document> list = new ArrayList<Document>();
        for(int i=0;i<10;i++){
            Document document = new Document();
            document.append("no",10+i);
            document.append("name","name_"+i);
            document.append("sex",i%3==1?"男":"女");
            document.append("score", Arrays.asList("测试1","测试2"));
            list.add(document);
        }
        //添加
        students_coll.insertMany(list);
        Pattern pattern = Pattern.compile("NAME_",Pattern.CASE_INSENSITIVE);

        BasicDBObject bcond = new BasicDBObject();
        bcond.put("no",new BasicDBObject().append("$lte",16));
        bcond.append("name",new BasicDBObject().append("$regex",pattern));
        //修改
        UpdateResult updateresult = students_coll.updateMany(eq("name","name_0"),
                new BasicDBObject("$set",new BasicDBObject("name","name_修改后")));
        System.out.println("更新："+updateresult.getModifiedCount()+"条数据");
        //查询
        FindIterable<Document> ite =  students_coll.find(bcond);
        MongoCursor cursor = ite.iterator();
        while(cursor.hasNext()){
            System.out.println(cursor.next());
        }
        DeleteResult deleteresult = students_coll.deleteMany(regex("name",pattern));
        System.out.println("删除了"+deleteresult.getDeletedCount()+"条数据！");
        client.close();
    }


}



